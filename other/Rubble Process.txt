
The Rubble Processing Pipeline

This File is mostly for the terminally curious, and me of course ;)
The information here details how it should be, if that's not how it is, it's a bug.

==============================================
Detailed Order of Execution
==============================================
	
	Logging is setup
	The error handler is setup
	
	Config file is loaded (if present)
	Commandline options are processed
	
	If -profile is set:
		Profiling is started
	
	If -netprofile is set:
		the live profiling server is started
	
	If -prep is not set:
		All addons are loaded
		
		If -addons is set:
			value from -addons is split and result is used as active addon list
		
		If -addons is not set:
			If <addondir>/addonlist.ini is present:
				<addondir>/addonlist.ini is parsed and result is used as active addon list
			If <addondir>/addonlist.ini is not present:
				Current addon list is written to <addondir>/addonlist.ini
				If -shell is not set:
					Rubble Exits
		
		Addons are activated based on info from the active addons list
		
		If no addons are active:
			If -shell is not set:
				Rubble Exits
		
		If -addonlist is set:
			Rubble Exits
		
		File list is generated
		The list of input files is sorted (to interleave files)
		Current addon list is written to <addondir>/addonlist.ini
		
		If there are no files in file list:
			If -shell is not set:
				Rubble Exits
		
		If -lextest is set:
			If -shell is not set:
				The lexer test is run
				Rubble exits
	
	Any Rubble variables specified via -config are set
	Raptor is initialized
	
	If -prep is set:
		If -prep is set to "raw":
			All prep scripts for the main raw folder are run.
		
		If -prep is not set to "raw":
			All prep scripts for the specified region are run
		
		Rubble Exits
	
	Builtin templates are loaded
	
	If -shell is not set or -init is set:
		All init scripts are run
	
	If -shell is set:
		Enter shell mode
			(many, many, options here, I will not list them)
		Rubble Exits
	
	All pre tweak scripts are run
	All .txt and .rbl files are preparsed
	All .txt and .rbl files are parsed
	All .txt and .rbl files are postparsed
	All .txt and .rbl files have any variables outside of templates expanded
	All post tweak scripts are run
	All .txt files are prepended with file ids and written to disk
	Rubble exits

==============================================
Anatomy of a Template Call
==============================================

	All leading and trailing whitespace is striped from the params
	All variables are expanded in the params
	If the template is a native template then it's handler is called and the handler's return value is returned
	If the template is a script template then the script is run and the script's return value is converted to a string and returned
	Else the template's body is loaded and these transforms are run on it:
		Text of the forms $<NAME> or ${<NAME>} that is not in a child template is replaced with the value of the variable <NAME>
		Text of the forms %<NAME> or %{<NAME>} is replaced with the value of the param named <NAME> or the default value specified for that param
		Text of the forms %N or %{N} (where N is an integer) is replaced with the value of the Nth param or the default value specified for that position if there is no Nth param
	The template body is passed to the parser for that stage and the result is returned
