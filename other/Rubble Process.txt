
The Rubble Processing Pipeline

This File is mostly for the terminally curious, and me of course ;)
The information here details how it should be, if that's not how it is, it's a bug.

==============================================
Detailed Order of Execution
==============================================
	
	Logging is setup
	The error handler is setup
	
	Config file is loaded (if present)
	Commandline options are processed
	
	AXIS VFS is setup
	
	If -profile is set:
		Profiling is started
	
	First-stage scripting is setup
	
	If -prep or -install are not set:
		All addons are loaded
		
		For each occurrence of -addons (including from the config file)
			
			If value is a file:
				Split file into lines
				Feed lines to ini parser
				For each key/value:
				
					If value == true:
						Add key to active addon list
						
			If value is not a file:
				Value is split and result is added to active addon list
		
		If -addons is not set:
			If <addondir>/addonlist.ini is present:
				<addondir>/addonlist.ini is parsed and result is used as active addon list
			If <addondir>/addonlist.ini is not present:
				Current addon list is written to <addondir>/addonlist.ini
				Rubble Exits
		
		Addons are activated based on info from the active addons list
		
		All loader scripts are run
		
		If no addons are active:
			Rubble Exits
		
		If -addonlist is set:
			Rubble Exits
		
		File list is generated
		The list of input files is sorted (to interleave files)
		Current addon list is written to <addondir>/addonlist.ini
		
		If there are no files in file list:
			Rubble Exits
	
	Any Rubble variables specified via -config are set
	
	For each occurrence of -config (including from the config file)
		
		If value is a file:
			Split file into lines
		
		If value is not a file:
			Value is split
		
		Feed split config values to ini parser
		
		For each key/value:
			Set config variable "key" to "value"
	
	Second-stage scripting is initialized
	
	If -install is set:
		The AXIS "install" location is initialized
		All install scripts in the specified package are run
		
		Rubble Exits
	
	If -prep is set:
		The AXIS "prep" location is initialized
		
		If -prep is set to "raw":
			All prep scripts for the main raw folder are run.
		
		If -prep is not set to "raw":
			All prep scripts for the specified region are run
		
		Rubble Exits
	
	Builtin templates are loaded
	
	All init scripts are run
	
	All pre tweak scripts are run
	All .txt and .rbl files are preparsed
	All .txt and .rbl files are parsed
	All .txt and .rbl files are postparsed
	All .txt and .rbl files have any variables outside of templates expanded
	All post tweak scripts are run
	All .txt files are prepended with file ids and written to disk
	All graphics raws are prepended with file ids and written to disk
	All prep files are written to disk
	A copy of the addon list is written to the raw folder.
	All the config variables are dumped to an ini file and written to the raw folder.
	Rubble exits

==============================================
Anatomy of a Template Call
==============================================

	If the last param is "..." then append the params of the last template call to this call
	All leading and trailing whitespace is striped from the params
	All variables are expanded in the params
	If the template is a native template then it's handler is called and the handler's return value is returned
	If the template is a script template then the script is run and the script's return value is converted to a string and returned
	Else the template's body is loaded and these transforms are run on it:
		Text of the forms $<NAME> or ${<NAME>} that is not in a child template is replaced with the value of the variable <NAME>
		Text of the forms %<NAME> or %{<NAME>} is replaced with the value of the param named <NAME> or the default value specified for that param
	The template body is passed to the parser for that stage and the result is returned

==============================================
The Rubble GUI Actions and Events: Overview
==============================================

Several places I use AXIS VFS paths, this is because Rubble uses them and so it makes sense to
use them in the GUI. The problem is that the OS doe not understand these paths, luckily the
paths that the GUI uses can all be transformed to OS paths by search and replace.
AXIS VFS location IDs used:
	rubble:				The working directory that Rubble should use (may not be the same as the GUI's!)
	df:					The dwarf fortress directory
	out:				The raw folder

It is not the GUI's job to configure Rubble, the GUI should detect and use any valid Rubble setup but it does not try (nor should it try) to configure Rubble in any way. If the setup is invalid print an error and exit.

Several of the options that can be set in gui.ini are for use by non-standard Rubble setups, for example the "addonlist" key is for use by preconfigured Rubble installs that have custom addon activation setups (eg addons activated in scripts or in the rubble.ini file) and do not want some addons to show in the GUI.
These options should not appear in the gui.ini file unless the user explicitly adds them:
	addonlist
	minimal

The GUI is written in Autoit v3, certain things that would be trivial in go or Rex are fairly hard to do in Autoit. This means that the GUI does some things in a half-assed manner simply because it was easier that way. If I can ever find a good cross-platform GUI library for go the GUI will probably get exponentially better and will tie into Rubble at a much lower level (as then it would be possible to load Rubble directly into the GUI as a package with only minor changes).

The actions do not happen in this exact order, this is an idealized version of how it really is.

==============================================
GUI Startup Actions
==============================================

Read all options (by default from ./gui.ini)
	<otheroptions>		Extra command line options for Rubble
	<rubble_bin>		The Rubble binary name, by default "rubble.exe"
	<rubble_cwd>		The Rubble working directory, by default "./"
	<addonlist>			An addon list override, if provided use this instead of "rubble:addons/addonlist.ini"
	<minimal>			Should the GUI try to find the saves directory for prep and regen support?

Read path options as needed from rubble.ini (rubble.ini may not even exist)
	<dfdir>				The dwarf fortress directory, by default "./.."
	<addonsdir>			The Rubble addons directory, by default "rubble:addons"
	<outputdir>			The Rubble output directory, by default "df:raw"

Transform the path options with the Rubble AXIS VFS replacements:
	For <dfdir>:
		rubble:		./
	For <outputdir>:
		rubble:		./
		df:			<dfdir>
	For <addonsdir>:
		rubble:		./
		df:			<dfdir>
		out:		<outputdir>

If a command line option is provided run (in the <rubble_cwd> directory):
	"./<rubble_bin>" -install="<command line option>"
	
	This provides drag and drop installer support (highly optional)
	Feel free to not included this step.

Create the main window
	If <minimal> do not create the regen or prep tabs

At this point an exit callback should be registered that will save all options to the gui.ini file.

If <addonlist> is not set:
	Run the following in the <rubble_cwd> directory (in a hidden window if possible):
		"./<rubble_bin>" -addonlist
		
		This step generates/updates the "rubble:addons/addonlist.ini" file

If <addonlist> is set:
	Load a list of addons and their states from <addonlist>
		Populate the addon list GUI element from this list

If <addonlist> is not set:
	Load a list of addons and their states from "rubble:addons/addonlist.ini"
		Populate the addon list GUI element from this list

If not <minimal>:
	Load a list of all the regions 
	Populate the region list on the prep and regen tabs with this information
	Populate the regen region addon list GUI element with the information from the global addon list

Add "raw" to the region list for the prep tab only

Show the GUI
Start the event handler

==============================================
GUI Events
==============================================

Run Rubble Button:
	Get a list of all selected addons and join this list with semicolons:
		addon 1; addon 2;addon3;ect
		This string is hereafter know as <addonlist_joined>
	Update the <otheroptions> option with it's current GUI value
		
	Run (in the <rubble_cwd> directory):
		"./<rubble_bin>" -addons="<addonlist_joined>" <otheroptions>

If not <minimal>
	Run Prep Button:
		Load the selected prep region from the GUI
			Hereafter know as <prepregion>
		Run (in the <rubble_cwd> directory):
			"./<rubble_bin>" -prep="<prepregion>"
	
	Whenever a new regen region is selected:
		Load the selected regen region from the GUI
			Hereafter know as <regenregion>
		Load list of region addons from "df:data/save/<regenregion>/raw/addonlist.ini"
			Set the state of the addons in the region addon list GUI element from this information
				If any addons are active in the region list that are not in the global list it is an error
	
	Run Regen Button:
		Load the selected regen region from the GUI
			Hereafter know as <regenregion>
		Get a list of all the region's selected addons and join this list with semicolons:
			addon 1; addon 2;addon3;ect
			This string is hereafter know as <addonlistregion_joined>
		Update the <otheroptions> option with it's current GUI value
		
		Run (in the <rubble_cwd> directory):
			"./<rubble_bin>" -zapaddons -zapconfig -addons="<addonlistregion_joined>" -config="df:data/save/<regenregion>/raw/genconfig.ini" -outputdir="df:data/save/<regenregion>/raw"
	
