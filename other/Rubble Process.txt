
The Rubble Processing Pipeline

This File is mostly for the terminally curious, and me of course ;)
The information here details how it should be, if that's not how it is, it's a bug.

==============================================
Detailed Order of Execution
==============================================
	
	Logging is setup
	The error handler is setup
	
	Config file is loaded (if present)
	Commandline options are processed
	
	AXIS VFS is setup.
	
	If -profile is set:
		Profiling is started
	
	If -prep or -install are not set:
		All addons are loaded
		
		For each occurrence of -addons (including from the config file)
			
			If value is a file:
				Split file into lines
				Feed lines to ini parser
				For each key/value:
				
					If value == true:
						Add key to active addon list
						
			If value is not a file:
				Value is split and result is added to active addon list
		
		If -addons is not set:
			If <addondir>/addonlist.ini is present:
				<addondir>/addonlist.ini is parsed and result is used as active addon list
			If <addondir>/addonlist.ini is not present:
				Current addon list is written to <addondir>/addonlist.ini
				Rubble Exits
		
		Addons are activated based on info from the active addons list
		
		If no addons are active:
			Rubble Exits
		
		If -addonlist is set:
			Rubble Exits
		
		File list is generated
		The list of input files is sorted (to interleave files)
		Current addon list is written to <addondir>/addonlist.ini
		
		If there are no files in file list:
			Rubble Exits
	
	Any Rubble variables specified via -config are set
	
	For each occurrence of -config (including from the config file)
		
		If value is a file:
			Split file into lines
		
		If value is not a file:
			Value is split
		
		Feed split config values to ini parser
		
		For each key/value:
			Set config variable "key" to "value"
	
	Scripting is initialized
	
	If -install is set:
		The AXIS "install" location is initialized
		All install scripts in the specified package are run
		
		Rubble Exits
	
	If -prep is set:
		The AXIS "prep" location is initialized
		
		If -prep is set to "raw":
			All prep scripts for the main raw folder are run.
		
		If -prep is not set to "raw":
			All prep scripts for the specified region are run
		
		Rubble Exits
	
	Builtin templates are loaded
	
	All init scripts for all addons (including the inactive ones) are run
	
	All pre tweak scripts are run
	All .txt and .rbl files are preparsed
	All .txt and .rbl files are parsed
	All .txt and .rbl files are postparsed
	All .txt and .rbl files have any variables outside of templates expanded
	All post tweak scripts are run
	All .txt files are prepended with file ids and written to disk
	All graphics raws are prepended with file ids and written to disk
	All prep files are written to disk
	A copy of the addon list is written to the raw folder.
	All the config variables are dumped to an ini file and written to the raw folder.
	Rubble exits

==============================================
Anatomy of a Template Call
==============================================

	If the last param is "..." then append the params of the last template call to this call
	All leading and trailing whitespace is striped from the params
	All variables are expanded in the params
	If the template is a native template then it's handler is called and the handler's return value is returned
	If the template is a script template then the script is run and the script's return value is converted to a string and returned
	Else the template's body is loaded and these transforms are run on it:
		Text of the forms $<NAME> or ${<NAME>} that is not in a child template is replaced with the value of the variable <NAME>
		Text of the forms %<NAME> or %{<NAME>} is replaced with the value of the param named <NAME> or the default value specified for that param
	The template body is passed to the parser for that stage and the result is returned
