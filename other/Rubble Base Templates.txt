	
Rubble Template Documentation
User Templates defined in the "Libs/Base" addon.

==============================================
{COMMENT;<STUFF>...}
{C;<STUFF>...}
	Doesn't parse or return anything.

==============================================
{!VOID;<PRERAWS>...}
{VOID;<PRERAWS>...}
{#VOID;<PRERAWS>...}
{V;<PRERAWS>...}
	Parses <PRERAWS>, but doesn't return anything. Useful for suppressing the normal output of a template.

==============================================
{!ECHO;<PRERAWS>...}
{ECHO;<PRERAWS>...}
{#ECHO;<PRERAWS>...}
{E;<PRERAWS>...}
	Returns <PRERAWS>. Used to strip leading and trailing whitespace for better formatting of output and to control variable expansion.

==============================================
{!ABORT;<MESSAGE>}
{ABORT;<MESSAGE>}
{#ABORT;<MESSAGE>}
	Forces Rubble to exit, <MESSAGE> is displayed.

==============================================
{@SCRIPT;<CODE>}
	Runs script code and returns the result (as a string).

==============================================
{SHARED_OBJECT;<ID>;<DEFINITION>}
	Adds a common object with the id <ID> to the dictionary. <DEFINITION> may be any raws. If this template call is the first with this <ID>, then the given <DEFINITION> will be used in the finished raws.
	
	Note that the contents of <DEFINITION> are always parsed, whether or not the results will appear in the raws.

==============================================
{SHARED_PLANT;<ID>;<DEFINITION>}
	Adds a common plant to the dictionary. <DEFINITION> should be a complete plant entry, EXCLUDING the [PLANT:<ID>] tag. 
	
	SHARED_PLANT, like the other specialized shared object templates extracts all tile numbers and colors and wraps them in calls to #TILE or #COLOR.
	
	SHARED_PLANT is simply a specialized version of SHARED_OBJECT.

==============================================
{SHARED_INORGANIC;<ID>;<DEFINITION>}
	Adds a common inorganic to the dictionary. <DEFINITION> should be a complete inorganic stone entry, EXCLUDING the [INORGANIC:<ID>] tag. If this template call is the first to define this inorganic, then the given <DEFINITION> will be used in the finished raws. 
	
	SHARED_INORGANIC, like the other specialized shared object templates extracts all tile numbers and colors and wraps them in calls to #TILE or #COLOR.
	
	SHARED_INORGANIC is simply a specialized version of SHARED_OBJECT.

==============================================
{SHARED_MATERIAL_TEMPLATE;<ID>;<DEFINITION>}
	Adds a common material template to the dictionary. <DEFINITION> should be a complete template entry, EXCLUDING the [MATERIAL_TEMPLATE:<ID>] tag. If this template call is the first to define this material template, then the given <DEFINITION> will be used in the finished raws. 
	
	SHARED_MATERIAL_TEMPLATE, like the other specialized shared object templates extracts all tile numbers and colors and wraps them in calls to #TILE or #COLOR.
	
	SHARED_MATERIAL_TEMPLATE is simply a specialized version of SHARED_OBJECT.

==============================================
{SHARED_OBJECT_EXISTS;<ID>;<THEN_PRERAWS>;[<ELSE_PRERAWS>=""]}
	If a SHARED_OBJECT with the id <ID> exists then <THEN_PRERAWS> are parsed and returned. Else, <ELSE_PRERAWS> are parsed and returned.
	This is very useful for making addons with additional behavior that depends on things (items, materials, ect) from other addons.

==============================================
{SHARED_OBJECT_ADD;<ID>;<PRERAWS>}
	Appends the result of parsing <PRERAWS> to the end of SHARED_OBJECT <ID>. If that shared object does not exist it saves the result to append to any definition that may come later.

==============================================
{SHARED_OBJECT_KILL_TAG;<ID>;<TAG>}
	Disable all occurrences of <TAG> in shared object <ID>.
	<TAG> is the ID of the tag you wish to disable, do not add square brackets or specify it's parameters.
	
	Example:
		{SHARED_OBJECT_KILL_TAG;SLADE;UNDIGGABLE}

==============================================
{SHARED_OBJECT_REPLACE_TAG;<ID>;<TAG>;<REPLACEMENT>}
	Replace all occurrences of <TAG> in shared object <ID> with <REPLACEMENT>.
	<TAG> is the ID of the tag you wish to replace, do not add square brackets or specify it's parameters.
	
	Example:
		{SHARED_OBJECT_REPLACE_TAG;SLADE;UNDIGGABLE;[AQUIFER]}

==============================================
{REGISTER_REACTION_CLASS;<ID>;<CLASS>}
	Adds a [REACTION_CLASS:<CLASS>] tag to a SHARED_OBJECT.
	Just a specialized version of SHARED_OBJECT_ADD.

==============================================
{REGISTER_REACTION_PRODUCT;<ID>;<CLASS>;<PRODUCT>}
	Adds a [MATERIAL_REACTION_PRODUCT:<CLASS>:<PRODUCT>] tag to a SHARED_OBJECT.
	Just a specialized version of SHARED_OBJECT_ADD.

==============================================
{@IF;<STRING1>;<STRING2>;<THEN_PRERAWS>}
{@IF;<STRING1>;<STRING2>;<THEN_PRERAWS>;[<ELSE_PRERAWS>=""]}
	If <STRING1> and <STRING2> are equal, then <THEN_PRERAWS> are parsed and returned. Else, <ELSE_PRERAWS> are parsed and returned. This is very useful with variables.
	
	Example:
		{IF;$TEST_VAR;YES;[FOO];[BAR]}

==============================================
{@IF_ACTIVE;<ADDON>;<THEN_PRERAWS>;[<ELSE_PRERAWS>=""]}
	If <ADDON> is active, then <THEN_PRERAWS> are parsed and returned. Else, <ELSE_PRERAWS> are parsed and returned.

==============================================
{@IF_CODE;<CODE>;<THEN_PRERAWS>;[<ELSE_PRERAWS>=""]}
	If <CODE> returns true, then <THEN_PRERAWS> are parsed and returned. Else, <ELSE_PRERAWS> are parsed and returned.
	(<CODE> may be any valid script code)
	
==============================================
{@IF_SKIP;<STRING1>;<STRING2>}
	If <STRING1> and <STRING2> are equal then skip the current file.

==============================================
{@SET;<NAME>;<VALUE>}
	Sets a variable of name <NAME> to value <VALUE>. Returns nothing.

==============================================
{#ADVENTURE_TIER}
	Returns a new unique [ADVENTURE_TIER:X] tag every time it is processed.
	
	Example (assuming {#ADVENTURE_TIER} wasn't previously called):
		{#ADVENTURE_TIER} -> [ADVENTURE_TIER:1]
		{#ADVENTURE_TIER} -> [ADVENTURE_TIER:2]

==============================================
{!PRINT;<MSG>...}
{PRINT;<MSG>...}
{#PRINT;<MSG>...}
	Writes <MSG> to the console. Each param gets it's own line.

==============================================
{SET_TILE;<ID>;<TILE>}
	Sets tile entry <ID> to <TILE>.
	Used to add support for tilesets, first entry "wins".

==============================================
{#TILE;<ID>;<DEFAULT>}
	If a tile entry for <ID> exists return it, else return <DEFAULT>.
	Use everywhere a tile number is required.
	In most cases you will not need to use this template as the specialized SHARED_OBJECT templates handle insertion of this template automatically.

==============================================
{SET_COLOR;<ID>;<COLOR>}
	Sets color entry <ID> to <COLOR>.
	Used to add support for tilesets, first entry "wins".

==============================================
{#COLOR;<ID>;<DEFAULT>}
	If a color entry for <ID> exists return it, else return <DEFAULT>.
	Use everywhere a color is required.
	In most cases you will not need to use this template as the specialized SHARED_OBJECT templates handle insertion of this template automatically.

==============================================
{INSTALL_TILESHEET;<TILESHEET>}
	Copies the specified tilesheet image from your addon into the data/art directory.

==============================================
{SET_FULLSCREEN_TILESHEET;<TILESHEET>}
	Sets the tilesheet used in fullscreen mode, both with graphics enabled and with them disabled.

==============================================
{SET_WINDOWED_TILESHEET;<TILESHEET>}
	Sets the tilesheet used in windowed mode, both with graphics enabled and with them disabled.

==============================================
{SET_FULLSCREEN_FONT_GRAPHICS;<TILESHEET>}
	Sets the tilesheet used in fullscreen graphical mode.

==============================================
{SET_WINDOWED_FONT_GRAPHICS;<TILESHEET>}
	Sets the tilesheet used in windowed graphical mode.

==============================================
{SET_FULLSCREEN_FONT;<TILESHEET>}
	Sets the tilesheet used in fullscreen non-graphical mode.

==============================================
{SET_WINDOWED_FONT;<TILESHEET>}
	Sets the tilesheet used in windowed non-graphical mode.

==============================================
{OPEN_D_INIT}
	Opens "d_init.txt" for editing.

==============================================
{EDIT_D_INIT;<SETTING>;<VALUE>}
	Edit a setting in "d_init.txt".
	<SETTING> must be one of:
		SKY
		CHASM
		PILLAR_TILE
		TRACK_N
		TRACK_S
		TRACK_E
		TRACK_W
		TRACK_NS
		TRACK_NE
		TRACK_NW
		TRACK_SE
		TRACK_SW
		TRACK_EW
		TRACK_NSE
		TRACK_NSW
		TRACK_NEW
		TRACK_SEW
		TRACK_NSEW
		TRACK_RAMP_N
		TRACK_RAMP_S
		TRACK_RAMP_E
		TRACK_RAMP_W
		TRACK_RAMP_NS
		TRACK_RAMP_NE
		TRACK_RAMP_NW
		TRACK_RAMP_SE
		TRACK_RAMP_SW
		TRACK_RAMP_EW
		TRACK_RAMP_NSE
		TRACK_RAMP_NSW
		TRACK_RAMP_NEW
		TRACK_RAMP_SEW
		TRACK_RAMP_NSEW

==============================================
{CLOSE_D_INIT}
	Writes all changes to "d_init.txt", any value that was not set by a call to EDIT_D_INIT will have the vanilla default written.

==============================================
{#INSTALL_GRAPHICS_FILE;<FILE>}
	Copies the specified file from your addon into the raw/graphics directory.

==============================================
{@GRAPHICS_FILE}
	Changes the type of the current file to a graphics file.

==============================================
{BUILDING_WORKSHOP;<TECH>;<CLASS>}
	Similar to ITEM_CLASS, this registers a workshop to class <CLASS>. Used with #USES_TECH or #USES_BUILDINGS.
	Returns [BUILDING_WORKSHOP:<TECH>]

==============================================
{BUILDING_FURNACE;<TECH>;<CLASS>}
	Similar to ITEM_CLASS, this registers a furnace to class <CLASS>. Used with #USES_TECH or #USES_BUILDINGS.
	Returns [BUILDING_FURNACE:<TECH>]

==============================================
{#USES_BUILDINGS;<CLASSES>...}
	Usable in entity definitions. Expands to a list of building permissions of all <CLASS>es combined.

==============================================
{REACTION;<TECH>;<CLASS>}
	Similar to ITEM_CLASS, this registers a reaction to class <CLASS>. Used with #USES_TECH or #USES_REACTIONS.
	Returns [REACTION:<TECH>]

==============================================
{#USES_REACTIONS;<CLASSES>...}
	Usable in entity definitions. Expands to a list of reaction permissions of all <CLASS>es combined.

==============================================
{#USES_TECH;<CLASSES>...}
	Combo of #USES_BUILDINGS and #USES_REACTIONS

==============================================
{SHARED_ITEM;<TYPE>;<ITEM>;<DEFINITION>}
	Registers an item <ITEM> of type <TYPE>. Used later with #USES_ITEMS and ITEM_CLASS. 
	Returns [ITEM_<TYPE>:<ITEM>]
	
	SHARED_ITEM, like the other shared object templates, will extract tile numbers used in tool definitions and wrap them in calls to #TILE.
	
	<TYPE> must be one of AMMO, ARMOR, DIGGER, FOOD, GLOVES, HELM, INSTRUMENT, PANTS, SHIELD, SHOES, SIEGEAMMO, TOOL, TOY, TRAPCOMP or WEAPON.
	For type FOOD SHARED_ITEM just translates directly to a call to SHARED_OBJECT, no support for items classes is initiated (as foods do not need to be registered). The only reason SHARED_ITEM supports FOOD at all is for consistency.
	
	SHARED_ITEM is just a (very) specialized version of SHARED_OBJECT.

==============================================
{ITEM_CLASS;<CLASS>;[<RARITY>=COMMON]}
{ITEM_CLASS;<TYPE>;<ITEM>;<CLASS>;[<RARITY>=COMMON]}
	
	Sets an items class and rarity. Items may have many classes and each class may have a different rarity per item. 
	
	The first form of an ITEM_CLASS template always refers to the last ITEM template before it.
	The second form is for use in addons or other places where the call cannot follow the item definition.
	
	<RARITY> can be RARE, UNCOMMON, COMMON and FORCED.
	
	Example:
	
	{ITEM;WEAPON;ITEM_WEAPON_TEST;
		The weapon definition...
	}{ITEM_CLASS;TEST_WEAPONS}
	
	{#USES_ITEMS;TEST_WEAPONS} -> [WEAPON:ITEM_WEAPON_TEST]

==============================================
{#USES_ITEMS;<CLASS>}
	Usable in entity definitions. Expands to a list of item permissions of the <CLASS>. When using multiple #USES_ITEMS calls make sure every item is returned by at most one #USES_ITEMS call.

==============================================
{ADDON_HOOKS;<ID>;[<PLAYABLE>=false]}
	Usable in entity definitions, ADDON_HOOKS expands to a list of addon hooks for the entity (Addon hooks are tech/item classes). 
	By default the hooks installed are:
		ADDON_HOOK_GENERIC
		ADDON_HOOK_<ID>
	If <PLAYABLE> is true then the following hooks are also installed:
		ADDON_HOOK_PLAYABLE

==============================================
{DFHACK_LOADSCRIPT;<SCRIPTNAME>}
	Installs and adds for automatic loading the script <SCRIPTNAME>.
	This only works for scripts added by an addon, already installed scripts should use DFHACK_RUNCOMMAND.

==============================================
{DFHACK_RUNCOMMAND;<COMMAND>;[<PARAMS>...]}
	Sets a DFHack command up to run when the world is loaded.
	
	Example:
		{DFHACK_RUNCOMMAND;workflow;enable;drybuckets;auto-melt}

==============================================
{@ADV_TIME;<COUNT>;<UNIT>}
	Generates a time value for use in interactions and the like.
	This version is adventure mode centric.
	
	Using values like ".5" for the <COUNT> value should work but "1/2" will not.
	
	Valid values for <UNIT> are:
		SECOND
		SECONDS
		MINUTE
		MINUTES
		HOUR
		HOURS
		DAY
		DAYS
		WEEK
		WEEKS
		MONTH
		MONTHS
		SEASON
		SEASONS
		YEAR
		YEARS
	
	Example:
		{@ADV_TIME;5;DAYS} -> 432000

==============================================
{@FORT_TIME;<COUNT>;<UNIT>}
	Generates a time value for use in interactions and the like.
	Exactly like @ADV_TIME except for fortress mode.
	
	Units below MINUTE may be less than useful, as fortress mode time units lack precision.
	
	Example:
		{@FORT_TIME;5;DAYS} -> 6000

==============================================
{@GROWDUR;<COUNT>;<UNIT>}
	A direct replacement for the GROWDUR tag that lets you specify time in real-world units.
	Uses the same unit types as @ADV_TIME.
	
	Units below DAY may be less than useful, as growth duration time units lack precision.
	
	Example:
		{@GROWDUR;5;DAYS} -> [GROWDUR:60]

==============================================
{@BUILD_KEY;<KEY>;[<FURNACE>=false]}
	A replacement for the BUILD_KEY tag that automatically works out key conflicts.
	
	<KEY> should be of the form: X, SHIFT_X, CTRL_X or ALT_X.
	<FURNACE> should be true or false, set to true if the building is a furnace.
	
	If the requested key is already used it chooses the next open key in this order:
		X
		SHIFT_X
		CTRL_X
		ALT_X
	For example if you try to set a workshop key to "M" (which is used by the Mason's Workshop)
	you will get [BUILD_KEY:CUSTOM_SHIFT_M].
	"ALT_Z" will wrap around to "A", so no worries about running out (unless you use more than 104 buildings per category).
	
	Please note that while this template "knows" about the vanilla build keys it will not magically work with other build keys that do not use this template.
