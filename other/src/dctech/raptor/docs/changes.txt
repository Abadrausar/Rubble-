
v2.1.2
	Added new version of the Run function to the state: RunShell.
		Used for cases where you would expect "global" variables to be preserved.
	The shell program now uses RunShell
	Added new commands: sort:new and sort:map

v2.1.1
	Added the trap command to the base commands package
		trap can be used to handle some expected unrecoverable errors. Possibly dangerous, use with care.

v2.1
	The parser will no longer automatically create floats from lexer input 
		This is to stop the string "1.0" from becoming "1" and other issues of that sort.
	Fixed error when trying to fetch a namespace from a namespace

v2.0
	Raptor is now reentrant!
	The State has been split into two pieces, the State and the Script
		From the point of view of a command author the Script almost seamlessly takes the place of the State.
			Some small changes need to be made where data access is concerned.
		From the point of view of a client many things have changed.
			You only need one State, it can be used by as many scripts as you like, commands, namespaces, and types are properties of the State.
			For each script you want running concurrently you need one Script object.
				After every use the script object is cleared for reuse.
				The Script stores all non-namespaced variables (such variables are cleared when the script returns)
	For a better idea of how things work now take a look at the base commands and the shell program.

v1.0
	First version.
	Many, many, things changed from NCA 7.
