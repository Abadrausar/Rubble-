PACKAGE

package base
    import "dctech/raptor/commands/base"

    Raptor Base Commands.

FUNCTIONS

func CommandBreak(script *raptor.Script, params []*raptor.Value)
    A "soft" return, break will never return more than one level.

	break [value]

    Calling break inside a loop or if command will return from the current
    BLOCK not the command itself, this makes break good for ensuring if
    returns a specific value and/or "returning" a value to loop. Returns
    value or unchanged.

func CommandBreakLoop(script *raptor.Script, params []*raptor.Value)
    Forces a return until it hits a loop or foreach command or the script
    exits.

	breakloop [value]

    Returns value or unchanged.

func CommandCommand(script *raptor.Script, params []*raptor.Value)
    Creates a new user command.

	command name code [paramName...]

    Returns unchanged.

func CommandDelCommand(script *raptor.Script, params []*raptor.Value)
    Deletes a command. Be careful with this one! Some actions are not
    reversable from a script.

	delcommand name

    Returns unchanged.

func CommandDelNamespace(script *raptor.Script, params []*raptor.Value)
    Deletes a namespace. Be careful with this one! Some actions are not
    reversable from a script. For example it may be a very bad idea to
    delete debug or int.

	delnamespace name

    Returns unchanged.

func CommandDelVar(script *raptor.Script, params []*raptor.Value)
    Deletes a variable.

	delvar name

    Returns the deleted vars value.

func CommandError(script *raptor.Script, params []*raptor.Value)
    Manipulates the error flag.

	error [value]

    If you pass no params the error flag will returned, to set or unset the
    flag pass a boolean value. Returns unchanged or the value of the error
    flag.

func CommandEval(script *raptor.Script, params []*raptor.Value)
    Evaluates code in the current environment.

	eval code

    Returns the return value of the last command in the code it runs.

func CommandEvalInNew(script *raptor.Script, params []*raptor.Value)
    Evaluates code in a new environment.

	evalinnew code

    Returns the return value of the last command in the code it runs.

func CommandEvalInParent(script *raptor.Script, params []*raptor.Value)
    Evaluates code in the current environment's parent.

	evalinparent code

    Returns the return value of the last command in the code it runs.

func CommandExists(script *raptor.Script, params []*raptor.Value)
    Returns true (-1) if variable exists or if a index exists in a map or
    array.

	exists name
	exists value index

    Returns true or false.

func CommandExit(script *raptor.Script, params []*raptor.Value)
    Exit the script.

	exit [value]

    Returns value or unchanged.

func CommandForEach(script *raptor.Script, params []*raptor.Value)
    Runs code as command for each entry in a map or array value.

	foreach objectvalue code

    Params for code:

	code key value

    If code returns false foreach aborts. Does not stop returns, but does
    work with breakloop. Returns the return value of the last command in
    code.

func CommandGetCommand(script *raptor.Script, params []*raptor.Value)
    Gets a reference to a command. Note that command references are just
    strings with a special type. This type is needed to make this work
    correctly.

	getcommand name

    Returns a reference to the command.

func CommandIf(script *raptor.Script, params []*raptor.Value)
    If the condition is true run true code else if false code exists call
    false code.

	if condition truecode [falsecode]

    Returns the return value of the last command in the code it runs or
    unchanged.

func CommandLen(script *raptor.Script, params []*raptor.Value)
    Fetches the element count of an Indexable.

	len value

    Returns the element count.

func CommandLoop(script *raptor.Script, params []*raptor.Value)
    Runs code for as long as the code returns true.

	loop code

    Returns the return value of the last command in the code it runs, always
    false unless loop exited with ret (In which case the return value is
    unusable by the command calling loop anyway).

func CommandNamespace(script *raptor.Script, params []*raptor.Value)
    Creates a new namespace.

	namespace name

    Returns unchanged.

func CommandNop(script *raptor.Script, params []*raptor.Value)
    Does nothing.

	nop

    Returns unchanged.

func CommandRet(script *raptor.Script, params []*raptor.Value)
    Return from current command.

	ret [value]

    Some commands will be bypassed like if and loop, for example calling ret
    from inside a loop will not return from the loop, it will return from
    the command that called loop. See break. Returns value or unchanged.

func CommandRun(script *raptor.Script, params []*raptor.Value)
    Runs code as a user command.

	run code [params...]

    Returns the return value of the last command in the code it runs.

func CommandSet(script *raptor.Script, params []*raptor.Value)
    Sets the value of variable "name" to value or sets the value of the map
    or array at index to value.

	set name value
	set objectvalue index value

    Returns value.

func CommandThis(script *raptor.Script, params []*raptor.Value)
    Retrieves the current "this" value. The value returned by this command
    will only be useful under certain circumstaces!

	this

    Returns the value of the This register.

func CommandVar(script *raptor.Script, params []*raptor.Value)
    Creates a new variable setting the value to value if present.

	var name [value]

    Returns value or unchanged.

func NewScriptArray() raptor.EditIndexable

func NewScriptArrayFromLit(script *raptor.Script, keys []string, values []*raptor.Value) *raptor.Value

func NewScriptArraySized(size int) raptor.EditIndexable

func NewScriptMap() raptor.EditIndexable

func NewScriptMapFromLit(script *raptor.Script, keys []string, values []*raptor.Value) *raptor.Value

func Setup(state *raptor.State)
    Setup adds the base commands to the script. The base commands are:

	nop
	ret
	exit
	break
	breakloop
	error
	command
	delcommand
	getcommand
	namespace
	delnamespace
	var
	delvar
	this
	set
	exists
	len
	run
	eval
	evalinparent
	evalinnew
	if
	loop
	foreach

    Also registers the following indexables:

	map
	array

    The base commands are more or less required.


TYPES

type ScriptArray []*raptor.Value

func (this *ScriptArray) CodeString() string

func (this *ScriptArray) Exists(index string) bool

func (this *ScriptArray) Get(index string) *raptor.Value

func (this *ScriptArray) Keys() []string

func (this *ScriptArray) Len() int64

func (this *ScriptArray) Set(index string, value *raptor.Value) bool

func (this *ScriptArray) String() string

type ScriptMap map[string]*raptor.Value

func (this ScriptMap) CodeString() string

func (this ScriptMap) Exists(index string) bool

func (this ScriptMap) Get(index string) *raptor.Value

func (this ScriptMap) Keys() []string

func (this ScriptMap) Len() int64

func (this ScriptMap) Set(index string, value *raptor.Value) bool

func (this ScriptMap) String() string


