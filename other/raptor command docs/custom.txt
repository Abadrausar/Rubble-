
Built-in Natives:

Causes rubble to abort with an error.
	
	rubble:abort msg
	
	Returns unchanged.

Makes Rubble skip a file.
	
	rubble:skipfile name
	
	name is the file's BASE NAME not it's path!
	Returns unchanged.
	
Makes Rubble not write a file out after generation..
	
	rubble:nowritefile name
	
	name is the file's BASE NAME not it's path!
	Returns unchanged.

Marks a file as containing creature graphics.
	
	rubble:graphicsfile name
	
	name is the file's BASE NAME not it's path!
	Returns unchanged.

Returns the name of the current file.
	
	rubble:currentfile
	
	Returns the file name.

Set a Rubble variable.
	
	rubble:setvar name value
	
	Returns unchanged.

Get the value of a Rubble variable.
	
	rubble:getvar name
	
	Returns the value.

Parse Rubble code.
	
	rubble:stageparse code [stage]
	
	Note that how code is parsed depends on the parse stage.
	Returns the result of running code through the stage parser.

Call a Rubble template.

	rubble:calltemplate name [params...]
	
	Returns the templates return value.

Defines a Rubble script template.

	rubble:template name [params...] code
	
	Returns unchanged.

Checks if a named addon is active.
	
	rubble:addonactive name
	
	name needs to be the FULL name of the addon! (for example "Base/Files")
	The name check is case-sensitive!
	Returns true or false.

User Commands (loaded by init script in "Base" addon):

Increment a variable (by name).
	
	++ name

Decrement a variable (by name).
	
	-- name

For loop.
	
	for init test incriment code

While loop.
	
	while test code

Include a file.
	
	include path

Generate a place holder template.
	
	rubble:placeholder name
	
	Creates a template named <name> that returns a simple placeholder message,
	may be overridden by later definitions.

Dependency check.
	
	rubble:requireaddon me addon
	
	me and addon both need to be the full addon names! 
	me should be the addon doing the checking, addon should be the one checked.

Dependency check.
	
	rubble:incompatibleaddon me addon
	
	Same as rubble:requireaddon, just for incompatibilities instead of requirements.

Group state check.
	
	rubble:ingroup addon group
	
	Returns true if addon is part of the specified group.

Group state check.
	
	rubble:groupactive group
	
	Returns true if ANY addons in the specified group are active.

Group dependency check.
	
	rubble:grouprequires me addon
	
	Same as rubble:requireaddon except me should be an addon group.

Group dependency check.
	
	rubble:groupincompatible me addon
	
	Same as rubble:incompatibleaddon except me should be an addon group.


Variables:
	rubble:version		The Rubble version
	rubble:compat		Rubble version compatibility information, index with version, 
							true if this version is compatible with checked version, false if not compatible, nil if unknown.
	rubble:dfdir		The Dwarf Fortress directory
	rubble:outputdir	The Rubble output directory
	rubble:addonsdir	The directory where any addons may be found
	rubble:raws			This is an EditIndexable that stores string versions of all active addon files
