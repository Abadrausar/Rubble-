
(namespace rubble:libs_dfhack_command)
(var rubble:libs_dfhack_command:mats <map>)

# Gets a material to run a specified DFHack command via autosyndrome
# pass in an array of the command name followed by any params, including special autosyndrome commands if you want.
(command rubble:libs_dfhack_command:getmat params {
	(if (int:lt (len [params]) 1) {
		(rubble:abort "Error: Wrong param count to rubble:libs_dfhack_command:getmat")
	})
	
	(var id "")
	(for {(var count 0)}{(int:lt [count] (len [params]))}{(++ count)}{
		(set id (str:add [id] "_" [params [count]]))
	})
	
	(if (exists [rubble:libs_dfhack_command:mats] [id]){
	}{
		(set [rubble:libs_dfhack_command:mats] [id] (str:add
			"[INORGANIC:DFHACK_COMMAND" [id] "]\n"
			"\t[USE_MATERIAL_TEMPLATE:COMMAND_STONE_TEMPLATE]\n"
			"\t[SPECIAL]\n"
			"\t[SYNDROME]\n"
			"\t\t[SYN_CLASS:\\COMMAND]\n"
		))
		
		(for {(var count 0)}{(int:lt [count] (len [params]))}{(++ count)}{
			(set [rubble:libs_dfhack_command:mats] [id] (str:add
				[rubble:libs_dfhack_command:mats [id]]
				"\t\t[SYN_CLASS:" [params [count]] "]\n"
			))
		})
	})
	(str:add "INORGANIC:DFHACK_COMMAND" [id])
})

# Use this template as a replacement for a reaction product line.
(rubble:template "DFHACK_COMMAND" ... {
	(str:add "[PRODUCT:100:1:BOULDER:NONE:" (rubble:libs_dfhack_command:getmat [params]) "]")
})

(ret "")
