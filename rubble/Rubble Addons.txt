
==============================================
How to Write a Rubble Addon
==============================================

A Rubble addon is like a Blast addon except for 4 things:
	1) All files use Rubble syntax and templates
	2) There is no objects directory, all files are in the addon root directory (eg. "addons/test" instead of Blast's "addons/test/objects")
	3) There is no addon.pm or config.txt. There is a counterpart for config.txt, but it is not stored in the addon directory
	4) Addons may override the base simply by having a file of the same name. This is because Rubble does not postfix files with a namespace.

First things first: Get some raws, an addon is not very useful if it has no raws ;) 
For this tutorial I will be making a simple little mod that adds optional support for Broken Arrow. Broken Arrow is a simple archery rebalence mod that I like to use, but sometimes it's nice to be able to turn it off.

First lets get setup. Install Rubble (if you haven't yet) and create a new directory named "BrokenArrow" in the "source/addons" directory.

We will need to override two files, "item_ammo.txt" and "item_weapon.txt", so open up you raw/objects folder and copy those two files into your new addon folder. Now create a new file named "BrokenArrow.ini" in the "source" directory. The name of this file MUST match the name of your addons directory! (This file is Rubbles version of config.txt and works almost exactly like that file does in Blast.)

Open your new configuration file and add these lines:
	# Use the broken arrow archery rebalance?
	USE_BROKEN_ARROW = YES

The line that begins with '#' is a comment, comments are ignored by the config file parser.
Using a config file like this is not very useful in a simple case like this but for more complicated mods it really comes in handy.

Now for the mod itself:
Broken Arrow nerfs bows and crosbows by changing their stats and the stats of bolts and arrows, lets start with the ammo.

"item_ammo.txt" is really small so I'll just show the whole file:
[OBJECT:ITEM]

Added optional Broken Arrow mod

{ITEM;AMMO;ITEM_AMMO_BOLTS;CROSSBOW}
	[NAME:bolt:bolts]
	[CLASS:BOLT]
	[SIZE:150]
	{IF;$USE_BROKEN_ARROW;YES;
	[ATTACK:EDGE:5:1000:stab:stabs:NO_SUB:1000];
	[ATTACK:EDGE:2:2000:stab:stabs:NO_SUB:1000]}

{ITEM;AMMO;ITEM_AMMO_ARROWS;BOW}
	[NAME:arrow:arrows]
	[CLASS:ARROW]
	[SIZE:150]
	{IF;$USE_BROKEN_ARROW;YES;
	[ATTACK:EDGE:5:1000:stab:stabs:NO_SUB:1000];
	[ATTACK:EDGE:2:2000:stab:stabs:NO_SUB:1000]}

{ITEM;AMMO;ITEM_AMMO_BLOWDARTS;BLOWGUN}
	[NAME:blowdart:blowdarts]
	[CLASS:BLOWDART]
	[SIZE:20]
	[ATTACK:EDGE:1:50:stick:sticks:NO_SUB:1000]

The first thing to note is the lack of a file id line at the top, Rubble adds this line automaticly so there is no need to do so manually.
Notice how every ammo definition begins with a template? That is the item template. It registers the item under a specific catagory or "class", this makes it easy to setup entity permitted item lists.
Now check out the IF template in the bolt definition, there is the variable we defined in the configuration file. The '$' that prefixes its name tells Rubble to look up it's value and use it instead of it's name. Note that Rubble does not prefix variables created from the configuration file with a namespace or "CONFIG_" unlike Blast. This means that you need to be careful not to collide with other addons.

In any case we now have a little mod that makes arrows and bolts penatrate less and have a larger contact area, but only if we set USE_BROKEN_ARROW to YES in our config file.

Now for "item_weapon.txt". This file is rather large so I'll show just the entry for the crossbow (the bow entry is nearly the same):
{ITEM;WEAPON;ITEM_WEAPON_CROSSBOW;CROSSBOW}
	[NAME:crossbow:crossbows]
	[SIZE:400]
	[SKILL:HAMMER]
	[RANGED:CROSSBOW:BOLT]
	{IF;$USE_BROKEN_ARROW;YES;
	[SHOOT_FORCE:27]
	[SHOOT_MAXVEL:200]
	;
	[SHOOT_FORCE:1000]
	[SHOOT_MAXVEL:1000]
	}
	[TWO_HANDED:0]
	[MINIMUM_SIZE:15000]
	[MATERIAL_SIZE:3]
	[ATTACK:BLUNT:10000:4000:bash:bashes:NO_SUB:1250]

Same basic IF and ITEM templates, nothing really new here, so just make the same changes to your copy of ITEM_WEAPON_BOW as well and lets move on.

Now all you need to do is generate the raws. If you are testing this on a fresh, vanilla DF you can just run Rubble without a base. Rubble (unlike Blast) does not clear your raw/objects directory automaticly so for simple cases like this a base is not needed.

You little addon should work fine, but if not you have just learned an valuable lesson: Just because Rubble (or Blast for that matter) ran without errors does not mean the result is valid raws. Fix any errors and enjoy!

One more thing, as you saw earlier the ITEM template associates an item with a class here is a simple example of how that is used in an entity:
Code:
{#USES_ITEMS;CROSSBOW;BOW}
Output:
[AMMO:ITEM_AMMO_ARROWS]
[AMMO:ITEM_AMMO_BOLTS]
[WEAPON:ITEM_WEAPON_BOW]
[WEAPON:ITEM_WEAPON_CROSSBOW]

The standard base does not make use of item classes (yet)

If you want to see another (better) way to make the above addon look in "source/addons/__broken_arrow"

==============================================
Other Random Information:
==============================================

If you want to allow an item, reaction, or building with a minimum of fuss register it as class "ADDON_HOOK_MOUNTAIN". Addon hooks also exist for the other entities.

If you are making a template that takes a variable number of params and you want to impliment it via a NCA script you may need the ... param.
Example:
	{!TEMPLATE;VOID;
		{SCRIPT;
			(foreach params {
				'Note that params here is NOT the same map as the params passed to foreach'
				(rubble:stageparse [params 1])
				(break -1)
			})
			(ret "")
		;...}
	}
If Rubble finds a template call where the last param is ... it append the params from the previous template call to the current templates params.
