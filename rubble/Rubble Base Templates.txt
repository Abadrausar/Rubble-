	
Rubble Template Documentation
User Templates in Standared Base

==============================================
{SHARED_OBJECT;<NAME>;<DEFINITION>}
	Adds a common object of name <NAME> to the dictionary. <DEFINITION> may be any raws. If this template call is the first with this <NAME>, then the given <DEFINITION> will be used in the finished raws.
	
	Note that the contents of <DEFINITION> are always parsed, whether or not the results will appear in the raws.

==============================================
{COMMENT;<STUFF>...}
{C;<STUFF>...}
	Doesn't parse or return anything.

==============================================
{VOID;<PRERAWS>...}
	Parses <PRERAWS>, but doesn't return anything.

==============================================
{ECHO;<PRERAWS>...}
{E;<PRERAWS>...}
	Returns <PRERAWS>. Used to strip leading and trailing whitespace for better formatting of output and to delay variable expansion.

==============================================
{!PANIC;<MESSAGE>}
{PANIC;<MESSAGE>}
{#PANIC;<MESSAGE>}
	Forces Rubble to exit, <MESSAGE> is displayed.

==============================================
{IF;<STRING1>;<STRING2>;<THEN_PRERAWS>}
{IF;<STRING1>;<STRING2>;<THEN_PRERAWS>;<ELSE_PRERAWS>}
	If <STRING1> and <STRING2> are equal, then <THEN_PRERAWS> are parsed and returned. Else, <ELSE_PRERAWS> are parsed and returned. This is very useful with variables.
	
	Example:
		{IF;$TEST_VAR;YES;[FOO];[BAR]}


==============================================
{ONCE;<KEY>;<PRERAWS>}
	Parses and returns <PRERAWS> unless a ONCE block with the same <KEY> has been parsed earlier.

==============================================
{STATIC;<KEY>;<PRERAWS>}
	If this template is the first to be evaluated with key <KEY>, then <PRERAWS> are parsed and returned. Subsequent STATIC calls with the same <KEY> will return the result of the first parse instead without parsing anything else before that.

==============================================
{SET;<NAME>;<VALUE>}
	Sets a variable of name <NAME> to value <VALUE>. Returns nothing.

==============================================
{#ADVENTURE_TIER}
	Returns a new unique [ADVENTURE_TIER:X] tag every time it is processed.
	
	Example (assuming {#ADVENTURE_TIER} wasn't previously called):
		{#ADVENTURE_TIER} -> [ADVENTURE_TIER:1]
		{#ADVENTURE_TIER} -> [ADVENTURE_TIER:2]

==============================================
{#AQUIFER}
	Returns [AQUIFER] if the USE_AQUIFERS config option is YES.

==============================================
{!PRINT;<PRERAWS>...}
{PRINT;<PRERAWS>...}
{#PRINT;<PRERAWS>...}
	Writes <PRERAWS> to the console. Each param gets it's own line.

==============================================
{SHARED_INORGANIC;<NAME>;<DEFINITION>}
	Adds a common inorganic to the dictionary. <DEFINITION> should be a complete inorganic stone entry, EXCLUDING the [INORGANIC:<NAME>] tag. If this template call is the first to define this inorganic, then the given <DEFINITION> will be used in the finished raws. 
	
	Note that the contents of <DEFINITION> are always parsed, whether or not the results will appear in the raws, so you can put your REGISTER_ORE, REGISTER_REACTION_CLASS, and REGISTER_REACTION_PRODUCT calls in there.
	Uses SHARED_OBJECT, make sure <NAME> is unique.

==============================================
{SHARED_MATERIAL_TEMPLATE;<NAME>;<DEFINITION>}
	Adds a common material template to the dictionary. <DEFINITION> should be a complete template entry, EXCLUDING the [MATERIAL_TEMPLATE:<NAME>] tag. If this template call is the first to define this material template, then the given <DEFINITION> will be used in the finished raws. 
	
	Note that the contents of <DEFINITION> are always parsed, whether or not the results will appear in the raws, so you can put your REGISTER_REACTION_CLASS, and REGISTER_REACTION_PRODUCT calls in there.
	Uses SHARED_OBJECT, make sure <NAME> is unique.

==============================================
{REGISTER_ORE;<ORE>;<METAL>;<AMOUNT>}
	Adds a [METAL_ORE:<METAL>:<AMOUNT>] tag to the definition of <ORE>. For this to work, <ORE> must be registered as a SHARED_INORGANIC. If this is called multiple times with the same <ORE> and <METAL>, the highest <AMOUNT> is used.

==============================================
{REGISTER_REACTION_CLASS;<INORGANIC>;<CLASS>}
	Adds a [REACTION_CLASS:<CLASS>] tag to the definition of <INORGANIC>. For this to work, <INORGANIC> must be registered as a SHARED_INORGANIC.

==============================================
{REGISTER_REACTION_PRODUCT;<INORGANIC>;<CLASS>;<PRODUCT>}
	Adds a [MATERIAL_REACTION_PRODUCT:<CLASS>:<PRODUCT>] tag to the definition of <INORGANIC>. For this to work, <INORGANIC> must be registered as a SHARED_INORGANIC.

==============================================
{SET_TILE;<ID>;<TILE>}
	Sets tile entry <ID> to <TILE>.
	Used to add support for tilesets, first entry "wins".

==============================================
{#TILE;<ID>;<DEFAULT>}
	If a tile entry for <ID> exists return it else return <DEFAULT>.
	Use everywhere a tile number is required.

==============================================
{BUILDING_WORKSHOP;<TECH>;<CLASS>}
	Similar to ITEM_CLASS, this registers a workshop to class <CLASS>. Used with #USES_TECH or #USES_BUILDINGS.
	Returns [BUILDING_WORKSHOP:<TECH>]

==============================================
{BUILDING_FURNACE;<TECH>;<CLASS>}
	Similar to ITEM_CLASS, this registers a furnace to class <CLASS>. Used with #USES_TECH or #USES_BUILDINGS.
	Returns [BUILDING_FURNACE:<TECH>]

==============================================
{#USES_BUILDINGS;<CLASSES>...}
	Usable in entity definitions. Expands to a list of building permissions of all <CLASS>es combined.

==============================================
{REACTION;<TECH>;<CLASS>}
	Similar to ITEM_CLASS, this registers a reaction to class <CLASS>. Used with #USES_TECH or #USES_REACTIONS.
	Returns [REACTION:<TECH>]
	
==============================================
{#USES_REACTIONS;<CLASSES>...}
	Usable in entity definitions. Expands to a list of reaction permissions of all <CLASS>es combined.

==============================================
{#USES_TECH;<CLASSES>...}
	Combo of #USES_BUILDINGS and #USES_REACTIONS

==============================================
{ITEM;<TYPE>;<ITEM>;<DEFINITION>}
	Registers an item <ITEM> of type <TYPE>. Used later with #USES_ITEMS and ITEM_CLASS. 
	Returns [ITEM_<TYPE>:<ITEM>]
	
	<TYPE> must be one of AMMO, ARMOR, DIGGER, GLOVES, HELM, INSTRUMENT, PANTS, SHIELD, SHOES, SIEGEAMMO, TOOL, TOY, TRAPCOMP or WEAPON.

==============================================
{ITEM_CLASS;<CLASS>;<RARITY>=COMMON}
	
	Sets an items class and rarity. Items may have many classes and each class may have a different rarity per item. An ITEM_CLASS template always refers to the last ITEM template before it.
	
	<RARITY> can be RARE, UNCOMMON, COMMON and FORCED.
	
	Example:
	
	{ITEM:WEAPON;ITEM_WEAPON_TEST;
		The weapon definition...
	}{ITEM_CLASS;TEST_WEAPONS}
	
	{#USES_ITEMS;TEST_WEAPONS} -> [WEAPON:ITEM_WEAPON_TEST]
	
==============================================
{#USES_ITEMS;<CLASS>}
	Usable in entity definitions. Expands to a list of item permissions of the <CLASS>. When using multiple #USES_ITEMS calls make sure every item is returned by at most one #USES_ITEMS call.
