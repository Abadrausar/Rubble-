	
Rubble Template Documentation
User Templates in Standared Base

==============================================
{SHARED_OBJECT;<NAME>;<DEFINITION>}
	Adds a common object of name <NAME> to the dictionary. <DEFINITION> may be any raws. If this template call is the first with this <NAME>, then the given <DEFINITION> will be used in the finished raws.
	
	Note that the contents of <DEFINITION> are always parsed, whether or not the results will appear in the raws.

==============================================
{COMMENT;<STUFF>...}
{C;<STUFF>...}
	Doesn't parse or return anything.

==============================================
{VOID;<PRERAWS>...}
	Parses <PRERAWS>, but doesn't return anything.

==============================================
{ECHO;<PRERAWS>...}
{E;<PRERAWS>...}
	Returns <PRERAWS>. Used to strip leading and trailing whitespace for better formatting of output and to delay variable expansion.

==============================================
{!PANIC;<MESSAGE>}
{PANIC;<MESSAGE>}
{#PANIC;<MESSAGE>}
	Forces Rubble to exit, <MESSAGE> is displayed.

==============================================
{IF;<STRING1>;<STRING2>;<THEN_PRERAWS>}
{IF;<STRING1>;<STRING2>;<THEN_PRERAWS>;<ELSE_PRERAWS>}
	If <STRING1> and <STRING2> are equal, then <THEN_PRERAWS> are parsed and returned. Else, <ELSE_PRERAWS> are parsed and returned. This is very useful with variables.
	
	Example:
		{IF;$TEST_VAR;YES;[FOO];[BAR]}


==============================================
{ONCE;<KEY>;<PRERAWS>}
	Parses and returns <PRERAWS> unless a ONCE block with the same <KEY> has been parsed earlier.

==============================================
{STATIC;<KEY>;<PRERAWS>}
	If this template is the first to be evaluated with key <KEY>, then <PRERAWS> are parsed and returned. Subsequent STATIC calls with the same <KEY> will return the result of the first parse instead without parsing anything else before that.

==============================================
{SET;<NAME>;<VALUE>}
	Sets a variable of name <NAME> to value <VALUE>. Returns nothing.

==============================================
{#ADVENTURE_TIER}
	Returns a new unique [ADVENTURE_TIER:X] tag every time it is processed.
	
	Example (assuming {#ADVENTURE_TIER} wasn't previously called):
		{#ADVENTURE_TIER} -> [ADVENTURE_TIER:1]
		{#ADVENTURE_TIER} -> [ADVENTURE_TIER:2]

==============================================
{#AQUIFER}
	Returns [AQUIFER] if the USE_AQUIFERS config option is YES.

==============================================
{!PRINT;<PRERAWS>...}
{PRINT;<PRERAWS>...}
{#PRINT;<PRERAWS>...}
	Writes <PRERAWS> to the console. Each param gets it's own line.

==============================================
{SHARED_INORGANIC;<NAME>;<DEFINITION>}
	Adds a common inorganic to the dictionary. <DEFINITION> should be a complete inorganic stone entry, EXCLUDING the [INORGANIC:<NAME>] tag. If this template call is the first to define this inorganic, then the given <DEFINITION> will be used in the finished raws. 
	
	Note that the contents of <DEFINITION> are always parsed, whether or not the results will appear in the raws, so you can put your REGISTER_ORE, REGISTER_REACTION_CLASS, and REGISTER_REACTION_PRODUCT calls in there.
	Uses SHARED_OBJECT, make sure <NAME> is unique.

==============================================
{SHARED_MATERIAL_TEMPLATE;<NAME>;<DEFINITION>}
	Adds a common material template to the dictionary. <DEFINITION> should be a complete template entry, EXCLUDING the [MATERIAL_TEMPLATE:<NAME>] tag. If this template call is the first to define this material template, then the given <DEFINITION> will be used in the finished raws. 
	
	Note that the contents of <DEFINITION> are always parsed, whether or not the results will appear in the raws, so you can put your REGISTER_REACTION_CLASS, and REGISTER_REACTION_PRODUCT calls in there.
	Uses SHARED_OBJECT, make sure <NAME> is unique.

==============================================
{SET_TILE;<ID>;<TILE>}
	Sets tile entry <ID> to <TILE>.
	Used to add support for tilesets, first entry "wins".

==============================================
{#TILE;<ID>;<DEFAULT>}
	If a tile entry for <ID> exists return it else return <DEFAULT>.
	Use everywhere a tile number is required.
