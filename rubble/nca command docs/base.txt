PACKAGE

package base
    import "dctech/nca6/base"

    NCA v6 Base Commands.

FUNCTIONS

func CommandArray(state *nca6.State, params []*nca6.Value)
    Creates a new array.

	array [size]

    Returns the new array

func CommandBreak(state *nca6.State, params []*nca6.Value)
    A "soft" return, break will never return more than one level.

	break [value]

    Calling break inside a loop or if command will return from the current
    BLOCK not the command itself, this makes break good for ensuring if
    returns a specific value and/or "returning" a value to loop. Returns
    value or unchanged.

func CommandCommand(state *nca6.State, params []*nca6.Value)
    Creates a new user command.

	command name code [paramName...]

    Returns unchanged.

func CommandDelVar(state *nca6.State, params []*nca6.Value)
    Deletes a variable.

	delvar name

    Returns the deleted vars value.

func CommandEval(state *nca6.State, params []*nca6.Value)
    Evaluates code in the current environment.

	eval code

    Returns the return value of the last command in the code it runs.

func CommandEvalInNew(state *nca6.State, params []*nca6.Value)
    Evaluates code in a new environment.

	evalinnew code

    Returns the return value of the last command in the code it runs.

func CommandEvalInParent(state *nca6.State, params []*nca6.Value)
    Evaluates code in the current environment's parent.

	evalinparent code

    Returns the return value of the last command in the code it runs.

func CommandExists(state *nca6.State, params []*nca6.Value)
    Returns true (-1) if variable exists or if a index exists in a map or
    array.

	exists name
	exists value index

    Returns 0 or -1.

func CommandExit(state *nca6.State, params []*nca6.Value)
    Exit the script.

	exit [value]

    Returns value or unchanged.

func CommandForEach(state *nca6.State, params []*nca6.Value)
    Runs code as command for each entry in a map or array value.

	foreach objectvalue code

    Params for code:

	code key value

    If code returns false foreach aborts. Returns the return value of the
    last command in code.

func CommandGetError(state *nca6.State, params []*nca6.Value)
    Gets the error flag.

	geterror

    Returns -1 or 0.

func CommandIf(state *nca6.State, params []*nca6.Value)
    If the condition is true run true code else if false code exists call
    false code.

	if condition truecode [falsecode]

    Returns the return value of the last command in the code it runs or
    unchanged.

func CommandInt(state *nca6.State, params []*nca6.Value)
    Forces a value's internal representation to be an integer.

	int value

    Returns the new value.

func CommandLen(state *nca6.State, params []*nca6.Value)
    Fetches the element count of an Indexable.

	len value

    Returns the element count.

func CommandLoop(state *nca6.State, params []*nca6.Value)
    Runs code for as long as the code returns true.

	loop code

    Returns the return value of the last command in the code it runs, always
    "0" or "" unless loop exited with ret (In which case the return value is
    unusable by the command calling loop anyway).

func CommandMap(state *nca6.State, params []*nca6.Value)
    Creates a new map.

	map

    Returns the new map

func CommandNamespace(state *nca6.State, params []*nca6.Value)
    Creates a new namespace.

	namespace name

    Returns unchanged.

func CommandNop(state *nca6.State, params []*nca6.Value)
    Does nothing.

	nop

    Returns unchanged.

func CommandRet(state *nca6.State, params []*nca6.Value)
    Return from current command.

	ret [value]

    Some commands will be bypassed like if and loop, for example calling ret
    from inside a loop will not return from the loop, it will return from
    the command that called loop. See break. Returns value or unchanged.

func CommandRun(state *nca6.State, params []*nca6.Value)
    Runs code as a user command.

	run code [params...]

    Returns the return value of the last command in the code it runs.

func CommandSet(state *nca6.State, params []*nca6.Value)
    Sets the value of variable "name" to value or sets the value of the map
    or array at index to value.

	set name value
	set objectvalue index value

    Returns value.

func CommandSetError(state *nca6.State, params []*nca6.Value)
    Sets (or unsets) the error flag.

	seterror [value]

    If you pass no params the error flag will be set, to unset pass a false
    value Returns unchanged.

func CommandString(state *nca6.State, params []*nca6.Value)
    Forces a value's internal representation to be a string.

	string value

    Returns 0 or -1.

func CommandVar(state *nca6.State, params []*nca6.Value)
    Creates a new variable setting the value to value if present.

	var name [value]

    Returns value or unchanged.

func NewScriptArray() nca6.Indexable

func NewScriptArraySized(size int) nca6.Indexable

func NewScriptMap() nca6.Indexable

func Setup(state *nca6.State)
    Setup adds the base commands to the state. The base commands are:

	nop
	ret
	exit
	break
	seterror
	geterror
	command
	namespace
	var
	map
	array
	delvar
	set
	exists
	len
	string
	int
	run
	eval
	evalinparent
	evalinnew
	if
	loop
	foreach

    The base commands are more or less required.


TYPES

type ScriptArray []*nca6.Value

func (this *ScriptArray) Exists(index string) bool

func (this *ScriptArray) Get(index string) *nca6.Value

func (this *ScriptArray) Keys() []string

func (this *ScriptArray) Len() int64

func (this *ScriptArray) Set(index string, value *nca6.Value)

type ScriptMap map[string]*nca6.Value

func (this ScriptMap) Exists(index string) bool

func (this ScriptMap) Get(index string) *nca6.Value

func (this ScriptMap) Keys() []string

func (this ScriptMap) Len() int64

func (this ScriptMap) Set(index string, value *nca6.Value)


