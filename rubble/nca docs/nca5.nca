
'new from v4:
	Maps are now special values stored in normal variables (and so commands may pass them as arguments or return them)
	Arrays, indexable ony by integers, stored like maps
	params is now an array
'

'this is a comment'

'To any poor sucker trying to make sense of this file: Sorry about the mess :p but this 
is all the documentation that exists for the basic syntax of NCA v5 (or any other version of NCA for that matter)'

'Basics:'
'all data is stored as a string
when a numeric value is needed the string is converted to a 64 bit signed integer
if the string is not a valid number its integer value is 0
(most of the time, the command docs will say so if it is different)'

"double qoute\n\tstring"
{nested/code 
	{string}}
raw_string

'a valid identifier is any string'
{{[( 
	'test')]}}
'is a valid identifier (a very strange and most certainly not a recommended one, but valid)'
"{[( \n\t\'test\')]}" 'this is the same as the one above'
'valid escape sequences: \n \r \t \' \" \xff \\'

'For details on any command, read its doc comment.'

'Commas are optional'

(command, param)
[deref]
[derefMap, index]

'Trying to read a non-existant map key will return the empty string'

'command decleration'
(command, name, paramName1, ..., paramNameN, code) 'fixed param count'
'or'
(command, name, ..., code) 'variable param count, note that in this case the ... is literal'
'or'
(command, name, code) 'no params'

'example command'
(command, test, __param1__, __param2__, {
	(add, __param1__, __param2__)
})

'Note that a variable param count command has a special array named "params" that stores its parameters
eg.'
(command, test, ..., {
	(add, [params 0], [params 1])
})

'It is recomended that command param names be pre and postfixed by double underscores so as to be less likely to collide with user variable names. eg __name__'

'variables, arrays, and maps'
(var, name, [value])
(map, name)
(array, name, size)

'namespace'
(namespace, name)

'names are written like so'
namespace1:namespace2:name

'namespace example'
(namespace, dctech)
(namespace, dctech:nca)
(var, dctech:nca:version, 5)


'Example code:'

'looping'
(var count 0)
(loop {
	(if (lt [count] 5) {
		(console:print [count])
		(set count (add [count] 1))
		(break -1)
	}{
		(console:print "\n")
		(break 0)
	})
})

'for loop'
(command for __init__ __test__ __incriment__ __code__ {
	(eval [__init__]) 
	(loop {
		(if (run [__test__]) {
			(run [__code__])
			(run [__incriment__])
			(break -1)
		}{
			(break 0)
		})
	})
})

'test for loop'
(for {(var fortest 0)} {(lt [fortest] 5)} {(set fortest (add [fortest] 1))} {
	(console:print [fortest])
})(console:print "\n")
'at this point fortest is not valid'


'simple while loop'
(command while __test__ __code__ {
	(loop {
		(if (run [__test__]) {
			(run [__code__])
			(break -1)
		}{
			(break 0)
		})
	})
})


'increment variable'
(command ++ __name__ {
	(set [__name__] (add [[__name__]] 1))
})

'decrement variable'
(command -- __name__ {
	(set [__name__] (sub [[__name__]] 1))
})

'for loop using ++'
(for {(var fortest 0)}{(lt [fortest] 5)}{(++ fortest)}{
	(console:print [fortest])
})(console:print "\n")


'include a file'
'requires the file io commands to be loaded'
(command include __path__ {
	(evalinparent (fileio:read [__path__]))
})

'nop example
nop means No OPeration, the nop command itself does nothing. 
This example showcases the rule that if a command returns nothing the return 
value will be the same as the return value of the previous command to run.
when used this way nop can be read as "insert the return value of the previous command".
This rule allows "un-nesting" commands without the use of variables.'
(fileio:read "somefile.ini")
(ini:parse (nop))
(ini:getvalue (nop) "somesection" "somekey")
(console:print (nop))
'The reason return values work like this is because all commands store their 
return value in a single register in the state. 
That means that if a command returns nothing then the return value is unchanged 
from the last command that returned something, which could be several commands back.'
'just another weird-and-wonderful NCAism :p'
'Oh, and by the way, I suggest you do not use nop for cases like the example. A much better use would be for passing a command result to several other command that all return unchanged.'